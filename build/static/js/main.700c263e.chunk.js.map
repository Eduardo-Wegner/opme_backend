{"version":3,"sources":["views/Header/Menu/Menu.tsx","services/requestData/requestData.tsx","views/Users/List/List.tsx","views/Users/Details/Details.tsx","views/Users/Repos/Repos.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Menu","Navbar","bg","variant","Brand","href","Nav","className","Link","to","requestData","url","Promise","resolve","reject","fetch","method","headers","then","response","console","log","json","result","catch","err","alert","error","override","css","List","userList","React","useState","user_array","set_user_array","next_link","set_next_link","loading","set_loading","useEffect","data","Container","size","color","striped","hover","containerStyle","paddingBottom","isKey","dataField","columnClassName","dataFormat","CellFormatter","Row","style","justifyContent","Button","onClick","cell","Details","user","userLogin","useParams","id","login","html_url","user_details","set_user_details","Table","bordered","paddingTop","target","Repos","props","user_repos","set_user_repos","set_items","activePage","set_activePage","public_repos","parseInt","toFixed","backgroundColor","marginTop","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","itemClass","linkClass","onChange","page","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.700c263e.chunk.js","sourcesContent":["import {Container,\r\nNavbar,\r\nNav } from 'react-bootstrap';\r\nimport React, { Component } from 'react';\r\nimport {\r\n    Link\r\n} from 'react-router-dom';\r\nfunction Menu () {\r\n    return(\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n            <Navbar.Brand href=\"#home\">OPME - Challenge</Navbar.Brand>\r\n            <Nav className=\"mr-auto\">\r\n                <Nav.Link href=\"/\"><Link to={'/'}>HOME</Link></Nav.Link>\r\n                <Nav.Link href=\"#TEST\">TEST</Nav.Link>\r\n                <Nav.Link href=\"#HEY_ANOTHER_TEST\">HEY_ANOTHER_TEST</Nav.Link>\r\n            </Nav>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nexport default Menu;","function requestData(url: string) {\r\n    return new Promise((resolve, reject) => {\r\n        fetch(url, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded'\r\n            },\r\n            // query: organization,\r\n        }).then(response => {\r\n            console.log(response);\r\n            return (response.json());\r\n        }).then(result => {\r\n            console.log(result);\r\n            resolve (result)\r\n        }).catch(err => {\r\n            alert('Erro de conexÃ£o.');\r\n            console.error(err);\r\n            reject(err)\r\n        });    \r\n    })\r\n    \r\n}\r\n\r\nexport default requestData;","import React, { Component, useState,useEffect } from 'react';\r\nimport {requestData} from '../../../services'\r\nimport './List.css'\r\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\r\nimport '../../../../node_modules/react-bootstrap-table/dist/react-bootstrap-table-all.min.css';\r\nimport {\r\n    Link\r\n} from 'react-router-dom';\r\nimport {\r\n    Container,\r\n    Table,\r\n    Button,\r\n    Row\r\n} from 'react-bootstrap';\r\nimport { css } from \"@emotion/core\";\r\nimport BarLoader from \"react-spinners/ClipLoader\";\r\nconst override = css`\r\n  display: block;\r\n  margin: 0 auto;\r\n  border-color: red;\r\n`;\r\n\r\nexport default function List (userList: any){\r\n    const [user_array, set_user_array] = React.useState([]);\r\n    const [next_link, set_next_link] = React.useState();\r\n    const [loading, set_loading] = React.useState(true);\r\n    useEffect(() => {\r\n        requestData('api/users?since=0').then((result: any)=>{\r\n        console.log(result)\r\n        set_user_array(result.data)\r\n        set_next_link(result.next_link)\r\n        set_loading(false)\r\n        console.log(user_array) })\r\n    },[])\r\n    return(\r\n    <div >\r\n        <Container className='Container_list' >\r\n                \r\n            <h1 className='H1'>LISTA</h1>\r\n                <BarLoader\r\n                    css={override}\r\n                    size={500}\r\n                    color={\"#123abc\"}\r\n                    loading={loading}\r\n                />\r\n                {loading && <BootstrapTable data={user_array} striped hover containerStyle={{paddingBottom:'5em'}}>\r\n                    <TableHeaderColumn isKey dataField='id' columnClassName='Td' className='Th'>ID</TableHeaderColumn>\r\n                    <TableHeaderColumn dataField='login' columnClassName='Td' className='Th' dataFormat={CellFormatter}></TableHeaderColumn>\r\n                </BootstrapTable>}\r\n                <Row style={{justifyContent: 'flex-end',paddingBottom: '5em'}}>\r\n                    <Button variant=\"light\" onClick={() =>{\r\n                        set_loading(true)\r\n                        requestData(next_link).then((result: any) => {\r\n                        console.log(result)\r\n                        set_user_array(result.data)\r\n                        set_next_link(result.next_link)\r\n                        set_loading(false)\r\n                        console.log(user_array)\r\n                    })}}>Next ></Button>\r\n                </Row>\r\n        </Container>\r\n    </div>\r\n    )\r\n}\r\n\r\nfunction CellFormatter(cell:string) {\r\n    return (<Link to={'/Details/'+cell}>{cell}</Link>);\r\n}\r\n\r\n","import React, { Component, useEffect } from 'react';\r\nimport { requestData } from '../../../services';\r\nimport './Details.css';\r\nimport {\r\n    Container,\r\n    Navbar,\r\n    Nav,\r\n    Table\r\n} from 'react-bootstrap';\r\nimport { css } from \"@emotion/core\";\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport {Repos} from '../index';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nfunction Details(user: any) {\r\n    let {userLogin} = useParams();\r\n    const [user_details, set_user_details] = React.useState({ id: '', login: '', html_url:''});\r\n    useEffect(() => {\r\n        requestData('/api/users/'+userLogin+'/details').then((result: any) => {\r\n            console.log(result)\r\n            set_user_details(result)            \r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n        <Container className='Container_list'>\r\n            <h1 className='H1'>{userLogin} Details:</h1>\r\n            <Table bordered style={{paddingTop:'5em', paddingBottom:'2em'}}>\r\n                <tbody>\r\n                    <tr>\r\n                        <td className='Td'>Id:</td>\r\n                        <td className='Td'>{user_details.id}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className='Td'>Login:</td>\r\n                        <td className='Td'>{user_details.login}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className='Td'>Profile URL:</td>\r\n                            <td className='Td'><a href={user_details.html_url} target=\"_blank\">{user_details.html_url}</a></td>\r\n                    </tr>\r\n                </tbody>\r\n            </Table>\r\n            \r\n        </Container>\r\n        <Repos {...user_details} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Details;","import React, { Component, useEffect } from 'react';\r\nimport { requestData } from '../../../services';\r\nimport './Repos.css';\r\nimport {\r\n    Container,\r\n    Row\r\n} from 'react-bootstrap';\r\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\r\nimport '../../../../node_modules/react-bootstrap-table/dist/react-bootstrap-table-all.min.css';\r\nimport { useParams } from 'react-router-dom';\r\nimport Pagination from \"react-js-pagination\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { css } from \"@emotion/core\";\r\nimport BarLoader from \"react-spinners/ClipLoader\";\r\n\r\nconst override = css`\r\n  display: block;\r\n  margin: 0 auto;\r\n  border-color: red;\r\n`;\r\n\r\nfunction Repos(props: any) {\r\n    let { userLogin } = useParams();\r\n  \r\n    const [user_repos, set_user_repos] = React.useState([]);\r\n    const [items, set_items] = React.useState(100);\r\n    const [activePage, set_activePage] = React.useState(1);\r\n    const [loading, set_loading] = React.useState(true);\r\n    useEffect(() => {\r\n    console.log(props)\r\n        props.public_repos % 30 > 0 ? set_items(parseInt((props.public_repos / 30).toFixed()+1)):set_items(parseInt((props.public_repos/30).toFixed()))\r\n        requestData('/api/users/' + userLogin + '/repos?count=0').then((result: any) => {\r\n            console.log(result)\r\n            set_user_repos(result)\r\n            set_loading(false)\r\n\r\n        })  \r\n    }, [props])\r\n\r\n      return (\r\n        <div>\r\n              \r\n            <hr style={{ backgroundColor: '#fff',marginTop:'5em' }} />\r\n            <Container className='Container_list'>\r\n                  <h1 className='H1'>{userLogin} Repositories:</h1>\r\n                  <BarLoader\r\n                      css={override}\r\n                      size={500}\r\n                      color={\"#123abc\"}\r\n                      loading={loading}\r\n                  />\r\n               {!loading && <BootstrapTable data={user_repos} striped hover containerStyle={{ paddingBottom: '5em' }}>\r\n                    <TableHeaderColumn isKey dataField='id' columnClassName='Td' className='Th'>ID</TableHeaderColumn>\r\n                    <TableHeaderColumn dataField='name' columnClassName='Td' className='Th'>Name</TableHeaderColumn>\r\n                    <TableHeaderColumn dataField='html_url' columnClassName='Td' className='Th' dataFormat={CellFormatter}></TableHeaderColumn>\r\n                </BootstrapTable> }\r\n                <Row style={{justifyContent:'flex-end', paddingBottom:'5em'}}>\r\n                  <Pagination\r\n                      activePage={activePage}\r\n                      itemsCountPerPage={30}\r\n                      totalItemsCount={props.public_repos}\r\n                      pageRangeDisplayed={5}\r\n                      itemClass=\"page-item\"\r\n                      linkClass=\"page-link\"\r\n                      onChange={(page)=>{\r\n                          console.log(page)\r\n                          set_activePage(page)\r\n                          set_loading(true)\r\n                            requestData('/api/users/' + userLogin + '/repos?count='+page).then((result: any) => {\r\n                                console.log(result)\r\n                                set_user_repos(result)\r\n                                set_loading(false)\r\n                            })  \r\n                      }}\r\n                  /> \r\n                </Row>              \r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction CellFormatter(cell: string) {\r\n    return (<a href={cell} target=\"_blank\">{cell}</a>);\r\n}\r\n\r\nexport default Repos;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Menu, List, Details} from './views'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\n\n// const Details = React.lazy(() => import('./views/Users/Details/Details'));\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Menu />\n        <Switch>\n          <Route path=\"/Details/:userLogin\">\n            <Details />\n          </Route>\n          <Route path=\"/\">\n            <List />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}